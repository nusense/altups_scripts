#! /usr/bin/env bash
# create a skeleton UPS setup for INCL++ (RWH hack)
#
b0=`basename $0`
export HERE=`pwd`
#
###############################################################################
# some defaults
###############################################################################
export PRODUCT="inclxx"
export VERSION="inclxx-v5.2.9.5-6aca7e6-tarball"
export QUALIFIER="e19:debug"
export FLAVOR=""

export VERBOSE=0
export ALLOWQUALMISMATCH=0

export DEPENDPRD1="root"
export DEPENDVER1="<not-specified>"
export DEPENDQUAL1="<not-specified>"
export DEPENDPRD2="boost"
export DEPENDVER2="<not-specified>"
export DEPENDQUAL2="<not-specified>"
#
export GCCSETUP="v8_2_0"
#
export showusage=0
export showpurpose=0
export showconfig=0
export doexit=-1

###############################################################################
# usage function
###############################################################################
purpose() {
  echo " " >&2
  echo "Purpose:  Create a skeleton UPS area for a version of $PRODUCT" >&2
  echo "  * Assumes $b0 is run from UPS area <path>/$PRODUCT" >&2
  echo "    where <path> is in \$PRODUCTS" >&2
   echo "  * Assumes GCC has been setup if not native" >&2
}
usage() {
  echo " " >&2
  echo "Usage:  $b0 [options] <ups-version> <ups-qualifier> " >&2
  echo "  -h | --help        this message and quit" >&2
  echo "  -t | --test        don't perform actual actions" >&2
  echo "  -v | --verbose     increase verbosity" >&2
  echo "  --show-config      show the configuration" >&2
  echo "  --qual-mismatch    allow GENIE/ROOT qualifier to be different" >&2
}
current_config() {
  echo " " >&2
  echo "Current Settings: PRODUCT=$PRODUCT" >&2
  echo "<version>='${VERSION}'"     >&2
  echo "<qualifier>='${QUALIFIER}'" >&2
  echo "<flavor>='${FLAVOR}'"       >&2
  echo "ISTEST=${ISTEST} VERBOSE=${VERBOSE}" >&2
  echo "PRODUCTS=${PRODUCTS}"       >&2
  if [ -n "$DEPENDPRD1" ]; then
    echo "will setup $DEPENDPRD1 $DEPENDVER1 -q $DEPENDQUAL1" >&2
    if [ -n "$DEPENDPRD2" ]; then
      echo "will setup $DEPENDPRD2 $DEPENDVER2 -q $DEPENDQUAL2" >&2
    fi
  fi
  if [ "$GCCSETUP" != "native" ]; then
    echo "will setup gcc $GCCSETUP"
  fi
  which gcc >&2
  gcc --version | head -1 >&2
}

###############################################################################
# helper functions
###############################################################################
ESC="\e"
if [ "Darwin" == `uname` ]; then ESC="\x1B"; fi
OUTRED="${ESC}[0;31m"
OUTGREEN="${ESC}[0;32m"
OUTNOC="${ESC}[0m" # No Color
#echo -e "${OUTRED}Hello Stack${OUTNOC}"
err_red() {
  echo -n $'\e[0;31m'  >&2 # works on Mac OS X as well
#  echo -n -e "${OUTRED}" >&2
}
err_green() {
  echo -n $'\e[0;32m' >&2
}
err_nocolor() {
  echo -n $'\e[0m' >&2
#  echo -n -e "${OUTNOC}" >&2
}

sortqual()
{
  # alphabetize the qual components, remove trailing ":"
  echo $1 | tr ":" "\n" | sort | tr "\n" ":" | sed -e "s/:$//"
}

check_cwd() {
  # ensure that the product matches the current directory
  PRDDIR=`basename $HERE`
  if [ "$PRDDIR" != "$PRODUCT" ]; then
    echo " " >&2
    err_red
    echo "$b0: HEY? working in '$PRDDIR' but skeleton for product '$PRODUCT'?" >&2
    err_nocolor
    showusage=1
    doexit=2
  fi
}

check_upsloc() {
  # ensure that UPS has been enabled for this location
  # (otherwise other steps might not work) and that the subdir matches product
  LOCALDB=`dirname $HERE`
  isthere=`echo $PRODUCTS | grep -c $LOCALDB`
  # echo "isthere='${isthere}' LOCALDB=$LOCALDB"
  if [ $isthere -lt 1 ]; then
    echo " " >&2
    err_red
    echo "$b0: HEY? working in " >&2
    echo "  $HERE " >&2
    echo "but base path not listed in \$PRODUCTS" >&2
    echo "     \$PRODUCTS=${PRODUCTS}" >&2
    echo "that is unlikely to end happily ... so I'll stop here"
    err_nocolor
  showpurpose=1
  showusage=1
  doexit=3
  fi
}

check_depend() {
  # which gcc ... if dependent on UPS version it should be setup already
  if [ -n $"SETUP_GCC" ]; then
    GCCSETUP=`echo ${SETUP_GCC} | tr -s ' ' | cut -d' ' -f2`
    GCCTABLELINE="setupRequired( gcc ${GCCSETUP} )"
  else
    GCCTABLELINE="# using native compiler (not recommended)"
  fi

#  # this depends on ROOT and boost
 DEPEND1_SETUP="$SETUP_ROOT"
 DEPENDPRD1="root"
 DEPENDVER1=`echo ${DEPEND1_SETUP} | tr -s ' ' | cut -d' ' -f2`
 DEPENDQUAL1=`echo ${DEPEND1_SETUP} | tr -s ' ' | cut -d' ' -f8`

 DEPEND2_SETUP="$SETUP_BOOST"
 DEPENDPRD2="boost"
 DEPENDVER2=`echo ${DEPEND2_SETUP} | tr -s ' ' | cut -d' ' -f2`
 DEPENDQUAL2=`echo ${DEPEND2_SETUP} | tr -s ' ' | cut -d' ' -f8`

  good_depend=1
  # check for qualifier mismatch
  if [ $ALLOWQUALMISMATCH -eq 0 ]; then
    prdqual=`sortqual $QUALIFIER`
    depqual1=`sortqual $DEPENDQUAL1`
    depqual2=`sortqual $DEPENDQUAL2`
    if [ -z "$DEPENDPRD1" ]; then depqual1=$prdqual ; fi
    if [ -z "$DEPENDPRD2" ]; then depqual2=$prdqual ; fi

    if [ "$prdqual" != "$depqual1" -o "$prdqual" != "$depqual2" ]; then
      echo " " >&2
      err_red
      echo "$b0: HEY? mismatch qualifiers" >&2
      echo "  $PRODUCT $QUALIFIER ($prdqual)" >&2
      if [ -n "$DEPENDPRD1" ]; then
        echo "  $DEPENDPRD1 $DEPENDQUAL1 ($depqual1)" >&2
         if [ -n "$DEPENDPRD2" ]; then
           echo "  $DEPENDPRD2 $DEPENDQUAL2 ($depqual2)" >&2
         fi
      fi
      err_nocolor
      good_depend=0
    fi
  fi
  if [ ${good_depend} -eq 0 ]; then
    echo " " >&2
    err_red
    echo "$b0: HEY? dependency should require '${DEPENDPRD}'" >&2
    echo "  but that has not been properly setup at this point" >&2
    err_nocolor
    showpurpose=1
    showusage=1
    doexit=4
  fi

}

###############################################################################
# process script args function
###############################################################################
#  longarg "::" means optional arg, if not supplied given as null string
process_args() {

  opterr=/tmp/getopt.err.$$

  TEMP=`getopt -n $b0 -s bash -a \
      --longoptions="help test verbose qual-mismatch-ok \
                     flavor: show-config checkout:: product: " \
      -o htvf -- "$@" 2> $opterr `
  getoptstat=$?
  eval set --"${TEMP}"

  dohelp=0
  if [ $getoptstat -ne 0 ]; then
    showusage=1
    doexit=1
    err_red
    echo " " >&2
    cat $opterr >&2
    err_nocolor
  fi
  rm $opterr

  while [ $# -gt 0 ]; do
    case "$1" in
      "--"               ) shift; break                 ;;
      -h | --help        ) dohelp=1                     ;;
      -t | --test        ) ISTEST=1                     ;;
      -v | --verbose     ) let VERBOSE=${VERBOSE}+1     ;;
      -f | --flavor      ) FLAVOR="$2"; shift           ;;
      --show-config      ) showconfig=1                 ;;
      --qual-mismatch-ok ) ALLOWQUALMISMATCH=1          ;;
      --checkout         )
        # optional parameter, if unset returns "" ... take that as true
        CHECKOUTOPT=$2; shift;
        case "$CHECKOUTOPT" in
          ""                                          ) CHECKOUT="true"  ;;
          true  | TRUE  | True  | on  | ON  | On  | 1 ) CHECKOUT="true"  ;;
          false | FALSE | False | off | OFF | Off | 0 ) CHECKOUT="false" ;;
          ssh                                         ) CHECKOUT="ssh"   ;;
          *                                           )
             err_red
             echo " " >&2
             echo "$b0: --checkout flag '$CHECKOUTOPT' unrecognizable" >&2
             echo " " >&2
             showusage=1
             doexit=1
             err_nocolor
             ;;
        esac
        ;;
      --product          ) PRODUCT=$2; shift            ;;
    esac
    shift # eat up this arg
  done

  if [ $dohelp -ne 0 ]; then
    doexit=0
    showpurpose=1
    showusage=1
  else
    # should be at least two positional parameters, the VERSION and QUALIFIER
    VERSION=$1
    QUALIFIER=`sortqual $2`
    if [ $# -lt 2 ]; then
      err_red
      echo " " >&2
      if [ $# -eq 0 ]; then
        echo "$b0: missing <version> and <qualifier> parameters" >&2
      else
        echo "$b0: missing <qualifier> parameter" >&2
      fi
      echo " " >&2
      err_nocolor
      doexit=1
      showusage=1
      showconfig=1
    fi
    if [ $# -eq 3 ]; then
      export SVNBASE="xyzzy/tags/$3"
      svntaglist=/tmp/svntaglist.$$
      svn list ${SVNPUB}/xyzzy/tags | tr -d '/' > ${svntaglist}
      svntags=`cat ${svntaglist}`
      found=0
      for t in $svntags
      do
        if [ "$t" == "$3" ]; then found=1; fi
      done
      if [ $found -eq 1 ]; then
        err_green
        echo "using tag $3 " >&2
        err_nocolor
      else
        err_red
        echo " " >&2
        echo "$b0: tag $3 not found in SVN ${SVNPUB}/xyzzy/tags:"
        cat $svntaglist
        echo " " >&2
        err_nocolor
        doexit=1
        showconfig=1
      fi
    fi
  fi

}

###############################################################################
# main program
###############################################################################

process_args "$@"


if [ $VERBOSE -gt 0 ]; then
  echo -e "${OUTGREEN}...done process_args ... start checks ${OUTNOC}"
fi

check_cwd
check_upsloc
check_depend

# flavor still unset?
if [ -z "$FLAVOR" ]; then
  FLAVOR=`ups flavor -4` # for now follow "genie"
fi

if [ $VERBOSE -gt 0 ]; then
  echo -e "${OUTGREEN}...cross-checks complete${OUTNOC}"
fi

# print help/config after parsing everything so that we can see what got set
if [ $showpurpose -gt 0 ]; then purpose ; fi
if [ $showusage   -gt 0 ]; then usage   ; fi
if [ $showconfig  -gt 0 ]; then current_config ; fi
echo " " >&2

if [ $doexit -ge 0 ]; then
  exit $doexit
fi

if [ $VERBOSE -gt 0 ]; then
  echo -e "${OUTGREEN}...start processing${OUTNOC}"
fi
#
#

# odd case for .version file if NULL, examples have trailing _
FLAVORVF=${FLAVOR}
if [ "$FLAVOR" == "NULL" ]; then FLAVORVF="NULL_"; fi
if [ -z "$FLAVOR" ]; then
  echo "FLAVOR was null -- can not proceed"
  exit
fi

# convert colon to dash, sort, remove trailing dash or newline
echo QUALIFIER=${QUALIFIER}
QPATH=`echo $QUALIFIER | tr ":" "\n" | sort | tr "\n" "-" | sed -e 's/-$//' | tr -d "\n" `
echo QPATH=${QPATH}

#echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "prepare to generate ups framework for"
echo "   setup ${PRODUCT} ${VERSION} -f ${FLAVOR} -q ${QUALIFIER}"
#echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

for p in ${VERSION}/${FLAVOR}-${QPATH}/ups \
         ${VERSION}/${FLAVOR}-${QPATH}/build \
         ${VERSION}/source \
         ${VERSION}.version
do
  if [ ! -d $p ]; then mkdir -p $p; fi
done

tableFile=${VERSION}/${FLAVOR}-${QPATH}/ups/${PRODUCT}.table
versionFile=${VERSION}.version/${FLAVORVF}-${QPATH}

#
# create the table file
#
cat > ${tableFile} <<EOF
File=Table
Product=${PRODUCT}
#*************************************************
# Starting Group definition

Group:

Flavor=${FLAVOR}
Qualifiers="${QUALIFIER}"

Common:
   Action=setup
      proddir()
      setupenv()
EOF
  if [ -n "$DEPENDPRD1" ]; then
cat >> ${tableFile} <<EOF
      setupRequired( ${DEPENDPRD1}  ${DEPENDVER1} -q ${DEPENDQUAL1} )
EOF
    if [ -n "$DEPENDPRD2" ]; then
cat >> ${tableFile} <<EOF
      setupRequired( ${DEPENDPRD2}  ${DEPENDVER2} -q ${DEPENDQUAL2} )
EOF
    fi
  fi

cat >> ${tableFile} <<EOF
      ${GCCTABLELINE}

      envSet(INCLXX_DIR, \${UPS_PROD_DIR})
      envSet(INCLXX_FQ, ${FLAVOR}-${QPATH})
      envSet(INCLXX_FQ_DIR, \${UPS_PROD_DIR}/\${INCLXX_FQ})
      envSet(INCLXX_VERSION, ${VERSION})
      envSet(INCLXX_PLATFORM, ${FLAVOR})
      envSet(INCLXX_SRC_DIR, \${INCLXX_DIR}/source/${INCLXX_VERSION})

      pathAppend(LD_LIBRARY_PATH, \${UPS_PROD_DIR}/\${INCLXX_FQ}/lib)
      pathAppend(PATH, \${UPS_PROD_DIR}/\${INCLXX_FQ}/bin)

End:
# End Group definition
#*************************************************
EOF

#
# create the version file, if it doesn't exist
#
if [ ! -f ${versionFile} ]; then
cat > ${versionFile} <<EOF
FILE = version
PRODUCT = ${PRODUCT}
VERSION = ${VERSION}

#*************************************************
EOF
fi

iam=`whoami`
if [ "$iam" == "nusoft" ]; then
  altiam=`klist | grep "Default principal" | cut -d':' -f2 | cut -d'@' -f1 | tr -d ' ' `
  if [ -n "$altiam" ]; then
    iam=${altiam}
    echo "i am \"${iam}\""
  fi
fi
nowGMT=`date -u "+%Y-%m-%d %H:%M:%S"`

nf=`grep QUALIFIERS ${versionFile} | grep -c \"${QUALIFIER}\"`
if [ $nf -ne 0 ]; then
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "${versionFile} already has an entry for \"${QUALIFIER}\""
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
else
#
# add this version to the version file
#
cat >> ${versionFile} <<EOF
#
FLAVOR = ${FLAVOR}
QUALIFIERS   = "${QUALIFIER}"
  DECLARER   = ${iam}
  DECLARED   = ${nowGMT} GMT
  MODIFIER   = ${iam}
  MODIFIED   = ${nowGMT} GMT
  PROD_DIR   = ${PRODUCT}/${VERSION}
  UPS_DIR    = ${FLAVOR}-${QPATH}/ups
  TABLE_FILE = ${PRODUCT}.table
#
#*************************************************
EOF
fi


# end-of-script
